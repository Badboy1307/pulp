# Copyright 2019 ETH Zurich and University of Bologna
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.



before_script:
  - pwd

# after_script:
#   - echo "stage finished"

stages:
  - fetch
  - build
  - test


fetch_regression_tests:
  stage: fetch
  script:
    - echo "Fetching regression tests"
    - make test-checkout-regression-gitlab
  artifacts:
     name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
     paths:
       - tests/*

fetch_ips:
  stage: fetch
  script:
    - source setup/vsim.sh
    - echo "Fetching IPs"
    - ./update-ips
    - echo "Generate scripts with DPI and VIP support"
    - ./generate-scripts 
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
    paths:
      - ips/*
      - sim/*
      - ipstools/*
      - .cached_ipdb.json


build_rtl:
  stage: build
  before_script:
  script:
    - echo "Compiling RTL model and DPI libraries"
    - make build
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
    paths:
      - tests/*
      - ips/*
      - sim/*
      - ipstools/*
      - rtl/*



# Use simplified pulp-runtime to run a subset of tests
test_bare_regressions:
  stage: test
  before_script:
    - echo "Re-build"
    - make build
    - echo "Fetching Runtime"
    - make pulp-runtime
    - echo "Source and exports"
    - source pulp-runtime/configs/pulp.sh; 
  script:
    - echo "Running software test"
    - make git-ci-bare-regs
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
    paths:
      - tests/*.html
      - tests/*.xml
    reports:
      junit: tests/*.xml


# Use simplified pulp-runtime to run a subset of tests
test_ml_regressions:
  stage: test
  before_script:
    - echo "Re-build"
    - make build
    - echo "Fetching Runtime"
    - make pulp-runtime
    - echo "Source and exports"
    - source pulp-runtime/configs/pulp.sh; 
  script:
    - echo "Running software test"
    - make git-ci-ml-regs
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
    paths:
      - tests/*.html
      - tests/*.xml
    reports:
      junit: tests/*.xml


# Use simplified pulp-runtime to run a subset of tests
test_riscv_regressions:
  stage: test
  before_script:
    - echo "Re-build"
    - make build
    - echo "Fetching Runtime"
    - make pulp-runtime
    - echo "Source and exports"
    - source pulp-runtime/configs/pulp.sh; 
  script:
    - echo "Running software test"
    - make git-ci-riscv-regs
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
    paths:
      - tests/*.html
      - tests/*.xml
    reports:
      junit: tests/*.xml

